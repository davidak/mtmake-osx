diff --git a/src/game.cpp b/src/game.cpp
index 5d53c67..5f52b47 100644
--- a/src/game.cpp
+++ b/src/game.cpp
@@ -4093,12 +4093,11 @@ inline void Game::updateProfilerGraphs(ProfilerGraph *graph)
 inline void Game::limitFps(FpsControl *fps_timings, f32 *dtime)
 {
 	// not using getRealTime is necessary for wine
-	device->getTimer()->tick(); // Maker sure device time is up-to-date
 	u32 time = device->getTimer()->getTime();
 
 	u32 last_time = fps_timings->last_time;
 
-	if (time > last_time)  // Make sure time hasn't overflowed
+	if (time > last_time) // Make sure time hasn't overflowed
 		fps_timings->busy_time = time - last_time;
 	else
 		fps_timings->busy_time = 0;
@@ -4110,23 +4109,15 @@ inline void Game::limitFps(FpsControl *fps_timings, f32 *dtime)
 	if (fps_timings->busy_time < frametime_min) {
 		fps_timings->sleep_time = frametime_min - fps_timings->busy_time;
 		device->sleep(fps_timings->sleep_time);
+		time += fps_timings->sleep_time;
 	} else {
 		fps_timings->sleep_time = 0;
 	}
 
-	/* Get the new value of the device timer. Note that device->sleep() may
-	 * not sleep for the entire requested time as sleep may be interrupted and
-	 * therefore it is arguably more accurate to get the new time from the
-	 * device rather than calculating it by adding sleep_time to time.
-	 */
-
-	device->getTimer()->tick(); // Update device timer
-	time = device->getTimer()->getTime();
-
-	if (time > last_time)  // Make sure last_time hasn't overflowed
+	if (time > last_time) // Checking for overflow
 		*dtime = (time - last_time) / 1000.0;
 	else
-		*dtime = 0;
+		*dtime = 0.03; // Choose 30fps as fallback in overflow case
 
 	fps_timings->last_time = time;
 }
